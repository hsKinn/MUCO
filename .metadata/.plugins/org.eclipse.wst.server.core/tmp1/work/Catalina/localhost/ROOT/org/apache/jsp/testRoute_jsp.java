/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2016-04-05 11:33:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class testRoute_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("html, body {\r\n");
      out.write("\theight: 100%;\r\n");
      out.write("\tmargin: 0;\r\n");
      out.write("\tpadding: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#map {\r\n");
      out.write("\theight: 100%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#floating-panel {\r\n");
      out.write("\tposition: absolute;\r\n");
      out.write("\ttop: 10px;\r\n");
      out.write("\tleft: 25%;\r\n");
      out.write("\tz-index: 5;\r\n");
      out.write("\tbackground-color: #fff;\r\n");
      out.write("\tpadding: 5px;\r\n");
      out.write("\tborder: 1px solid #999;\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("\tfont-family: 'Roboto', 'sans-serif';\r\n");
      out.write("\tline-height: 30px;\r\n");
      out.write("\tpadding-left: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#floating-panel {\r\n");
      out.write("\tmargin-left: -52px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"floating-panel\">\r\n");
      out.write("\t\t<button id=\"drop\" onclick=\"drop()\">Drop Markers</button>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div id=\"map\"></div>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\t// If you're adding a number of markers, you may want to drop them on the map\r\n");
      out.write("\t\t// consecutively rather than all at once. This example shows how to use\r\n");
      out.write("\t\t// window.setTimeout() to space your markers' animation.\r\n");
      out.write("\r\n");
      out.write("\t\tvar neighborhoods = [];\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfor (var i = 0; i < 4; i++) {\r\n");
      out.write("\t\t\tneighborhoods[i] = lat: 52.511, lng: 13.447;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t/*\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar neighborhoods = [\r\n");
      out.write("\t\t                     {lat: 52.511, lng: 13.447},\r\n");
      out.write("\t\t                     {lat: 52.549, lng: 13.422},\r\n");
      out.write("\t\t                     {lat: 52.497, lng: 13.396},\r\n");
      out.write("\t\t                     {lat: 52.517, lng: 13.394}\r\n");
      out.write("\t\t                   ];\r\n");
      out.write("\t\t*/\r\n");
      out.write("\t\tvar markers = [];\r\n");
      out.write("\t\tvar map;\r\n");
      out.write("\r\n");
      out.write("\t\tfunction initMap() {\r\n");
      out.write("\t\t\tmap = new google.maps.Map(document.getElementById('map'), {\r\n");
      out.write("\t\t\t\tzoom : 12,\r\n");
      out.write("\t\t\t\tcenter : {\r\n");
      out.write("\t\t\t\t\tlat : 52.520,\r\n");
      out.write("\t\t\t\t\tlng : 13.410\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tfunction drop() {\r\n");
      out.write("\t\t\tclearMarkers();\r\n");
      out.write("\t\t\tfor (var i = 0; i < neighborhoods.length; i++) {\r\n");
      out.write("\t\t\t\taddMarkerWithTimeout(neighborhoods[i], i * 200);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tfunction addMarkerWithTimeout(position, timeout) {\r\n");
      out.write("\t\t\twindow.setTimeout(function() {\r\n");
      out.write("\t\t\t\tmarkers.push(new google.maps.Marker({\r\n");
      out.write("\t\t\t\t\tposition : position,\r\n");
      out.write("\t\t\t\t\tmap : map,\r\n");
      out.write("\t\t\t\t\tanimation : google.maps.Animation.DROP\r\n");
      out.write("\t\t\t\t}));\r\n");
      out.write("\t\t\t}, timeout);\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tfunction clearMarkers() {\r\n");
      out.write("\t\t\tfor (var i = 0; i < markers.length; i++) {\r\n");
      out.write("\t\t\t\tmarkers[i].setMap(null);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tmarkers = [];\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\t<script async defer\r\n");
      out.write("\t\tsrc=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDuLfX3hC4iBa4XL588g7cB2OCHhPpjuy8&signed_in=true&callback=initMap\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
