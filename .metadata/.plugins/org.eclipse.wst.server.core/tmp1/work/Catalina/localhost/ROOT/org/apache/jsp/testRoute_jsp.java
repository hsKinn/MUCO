/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2016-04-04 10:57:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class testRoute_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("html, body {\r\n");
      out.write("  height: 100%;\r\n");
      out.write("  margin: 0;\r\n");
      out.write("  padding: 0;\r\n");
      out.write("}\r\n");
      out.write("#map {\r\n");
      out.write("  height: 100%;\r\n");
      out.write("  float: left;\r\n");
      out.write("  width: 70%;\r\n");
      out.write("  height: 100%;\r\n");
      out.write("}\r\n");
      out.write("#right-panel {\r\n");
      out.write("  font-family: 'Roboto','sans-serif';\r\n");
      out.write("  line-height: 30px;\r\n");
      out.write("  padding-left: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#right-panel select, #right-panel input {\r\n");
      out.write("  font-size: 15px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#right-panel select {\r\n");
      out.write("  width: 100%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#right-panel i {\r\n");
      out.write("  font-size: 12px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#right-panel {\r\n");
      out.write("  margin: 20px;\r\n");
      out.write("  border-width: 2px;\r\n");
      out.write("  width: 20%;\r\n");
      out.write("  float: left;\r\n");
      out.write("  text-align: left;\r\n");
      out.write("  padding-top: 20px;\r\n");
      out.write("}\r\n");
      out.write("#directions-panel {\r\n");
      out.write("  margin-top: 20px;\r\n");
      out.write("  background-color: #FFEE77;\r\n");
      out.write("  padding: 10px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<div style=\"height: 500px; width: 500px;\">\r\n");
      out.write("\t<div id=\"map\"></div>\r\n");
      out.write("    <div id=\"right-panel\">\r\n");
      out.write("    <div>\r\n");
      out.write("    <b>Start:</b>\r\n");
      out.write("    <select id=\"start\">\r\n");
      out.write("      <option value=\"368 Sanggok-ri, Hwaseo-myeon, Sangju, Gyeongsangbuk-do, South Korea\">Gyeongsangbuk-do, South Korea</option>\r\n");
      out.write("      <option value=\"Boston, MA\">Boston, MA</option>\r\n");
      out.write("      <option value=\"New York, NY\">New York, NY</option>\r\n");
      out.write("      <option value=\"Miami, FL\">Miami, FL</option>\r\n");
      out.write("    </select>\r\n");
      out.write("    <br>\r\n");
      out.write("    <b>Waypoints:</b> <br>\r\n");
      out.write("    <i>(Ctrl-Click for multiple selection)</i> <br>\r\n");
      out.write("    <select multiple id=\"waypoints\">\r\n");
      out.write("      <option value=\"540 Gaseon-ri, Yangsan-myeon, Yeongdong, Chungcheongbuk-do, South Korea\">Chungcheongbuk-do, South Korea</option>\r\n");
      out.write("      <option value=\"toronto, ont\">Toronto, ONT</option>\r\n");
      out.write("      <option value=\"chicago, il\">Chicago</option>\r\n");
      out.write("      <option value=\"winnipeg, mb\">Winnipeg</option>\r\n");
      out.write("      <option value=\"fargo, nd\">Fargo</option>\r\n");
      out.write("      <option value=\"calgary, ab\">Calgary</option>\r\n");
      out.write("      <option value=\"spokane, wa\">Spokane</option>\r\n");
      out.write("    </select>\r\n");
      out.write("    <br>\r\n");
      out.write("    <b>End:</b>\r\n");
      out.write("    <select id=\"end\">\r\n");
      out.write("      <option value=\"ì‚°112 Geumsan-ri, Dong-myeon, Yangsan, Gyeongsangnam-do, South Korea\">Yangsan, Gyeongsangnam-do</option>\r\n");
      out.write("      <option value=\"Seattle, WA\">Seattle, WA</option>\r\n");
      out.write("      <option value=\"San Francisco, CA\">San Francisco, CA</option>\r\n");
      out.write("      <option value=\"Los Angeles, CA\">Los Angeles, CA</option>\r\n");
      out.write("    </select>\r\n");
      out.write("    <br>\r\n");
      out.write("      <input type=\"submit\" id=\"submit\">\r\n");
      out.write("    </div>\r\n");
      out.write("    <div id=\"directions-panel\"></div>\r\n");
      out.write("    </div>\r\n");
      out.write("    <script>\r\n");
      out.write("function initMap() {\r\n");
      out.write("  var directionsService = new google.maps.DirectionsService;\r\n");
      out.write("  var directionsDisplay = new google.maps.DirectionsRenderer;\r\n");
      out.write("  var map = new google.maps.Map(document.getElementById('map'), {\r\n");
      out.write("    zoom: 6,\r\n");
      out.write("    center: {lat: 41.85, lng: -87.65}\r\n");
      out.write("  });\r\n");
      out.write("  directionsDisplay.setMap(map);\r\n");
      out.write("\r\n");
      out.write("  document.getElementById('submit').addEventListener('click', function() {\r\n");
      out.write("    calculateAndDisplayRoute(directionsService, directionsDisplay);\r\n");
      out.write("  });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function calculateAndDisplayRoute(directionsService, directionsDisplay) {\r\n");
      out.write("  var waypts = [];\r\n");
      out.write("  var checkboxArray = document.getElementById('waypoints');\r\n");
      out.write("  for (var i = 0; i < checkboxArray.length; i++) {\r\n");
      out.write("    if (checkboxArray.options[i].selected) {\r\n");
      out.write("      waypts.push({\r\n");
      out.write("        location: checkboxArray[i].value,\r\n");
      out.write("        stopover: true\r\n");
      out.write("      });\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  directionsService.route({\r\n");
      out.write("    origin: document.getElementById('start').value,\r\n");
      out.write("    destination: document.getElementById('end').value,\r\n");
      out.write("    waypoints: waypts,\r\n");
      out.write("    optimizeWaypoints: true,\r\n");
      out.write("    travelMode: google.maps.TravelMode.DRIVING\r\n");
      out.write("  }, function(response, status) {\r\n");
      out.write("    if (status === google.maps.DirectionsStatus.OK) {\r\n");
      out.write("      directionsDisplay.setDirections(response);\r\n");
      out.write("      var route = response.routes[0];\r\n");
      out.write("      var summaryPanel = document.getElementById('directions-panel');\r\n");
      out.write("      summaryPanel.innerHTML = '';\r\n");
      out.write("      // For each route, display summary information.\r\n");
      out.write("      for (var i = 0; i < route.legs.length; i++) {\r\n");
      out.write("        var routeSegment = i + 1;\r\n");
      out.write("        summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment +\r\n");
      out.write("            '</b><br>';\r\n");
      out.write("        summaryPanel.innerHTML += route.legs[i].start_address + ' to ';\r\n");
      out.write("        summaryPanel.innerHTML += route.legs[i].end_address + '<br>';\r\n");
      out.write("        summaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';\r\n");
      out.write("      }\r\n");
      out.write("    } else {\r\n");
      out.write("      window.alert('Directions request failed due to ' + status);\r\n");
      out.write("    }\r\n");
      out.write("  });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("    <script src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDuLfX3hC4iBa4XL588g7cB2OCHhPpjuy8&signed_in=true&callback=initMap\"\r\n");
      out.write("        async defer></script>\r\n");
      out.write("    <script type=\"text/javascript\" src=\"http://maps.googleapis.com/maps/api/js?v=3&amp;callback=google.loader.callbacks.maps&amp;sensor=false\"></script>\r\n");
      out.write("        </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
