/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2016-03-28 05:28:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class NewFile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=utf-8>\r\n");
      out.write("<meta name=\"viewport\" content=\"width=620\">\r\n");
      out.write("<title>HTML5 Demo: File API (simple)</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/html5demos.css\">\r\n");
      out.write("<script src=\"js/h5utils.js\"></script></head>\r\n");
      out.write("<body>\r\n");
      out.write("<section id=\"wrapper\">\r\n");
      out.write("<div id=\"carbonads-container\"><div class=\"carbonad\"><div id=\"azcarbon\"></div><script type=\"text/javascript\">var z = document.createElement(\"script\"); z.type = \"text/javascript\"; z.async = true; z.src = \"http://engine.carbonads.com/z/14060/azcarbon_2_1_0_VERT\"; var s = document.getElementsByTagName(\"script\")[0]; s.parentNode.insertBefore(z, s);</script></div></div>\r\n");
      out.write("    <header>\r\n");
      out.write("      <h1>File API (simple)</h1>\r\n");
      out.write("    </header>\r\n");
      out.write("\r\n");
      out.write("<article>\r\n");
      out.write("  <p id=\"status\">File API & FileReader API not supported</p>\r\n");
      out.write("  <p><input type=file></p>\r\n");
      out.write("  <p>Select an image from your machine to read the contents of the file without using a server</p>\r\n");
      out.write("  <div id=\"holder\"></div>\r\n");
      out.write("</article>\r\n");
      out.write("<script>\r\n");
      out.write("var upload = document.getElementsByTagName('input')[0],\r\n");
      out.write("    holder = document.getElementById('holder'),\r\n");
      out.write("    state = document.getElementById('status');\r\n");
      out.write("\r\n");
      out.write("if (typeof window.FileReader === 'undefined') {\r\n");
      out.write("  state.className = 'fail';\r\n");
      out.write("} else {\r\n");
      out.write("  state.className = 'success';\r\n");
      out.write("  state.innerHTML = 'File API & FileReader available';\r\n");
      out.write("}\r\n");
      out.write(" \r\n");
      out.write("upload.onchange = function (e) {\r\n");
      out.write("  e.preventDefault();\r\n");
      out.write("\r\n");
      out.write("  var file = upload.files[0],\r\n");
      out.write("      reader = new FileReader();\r\n");
      out.write("  reader.onload = function (event) {\r\n");
      out.write("    var img = new Image();\r\n");
      out.write("    img.src = event.target.result;\r\n");
      out.write("    // note: no onload required since we've got the dataurl...I think! :)\r\n");
      out.write("    if (img.width > 560) { // holder width\r\n");
      out.write("      img.width = 560;\r\n");
      out.write("    }\r\n");
      out.write("    holder.innerHTML = '';\r\n");
      out.write("    holder.appendChild(img);\r\n");
      out.write("  };\r\n");
      out.write("  reader.readAsDataURL(file);\r\n");
      out.write("\r\n");
      out.write("  return false;\r\n");
      out.write("};\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</section>\r\n");
      out.write("<a href=\"http://github.com/remy/html5demos\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"http://s3.amazonaws.com/github/ribbons/forkme_left_darkblue_121621.png\" alt=\"Fork me on GitHub\" /></a>\r\n");
      out.write("<script src=\"js/prettify.packed.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("try {\r\n");
      out.write("var pageTracker = _gat._getTracker(\"UA-1656750-18\");\r\n");
      out.write("pageTracker._trackPageview();\r\n");
      out.write("} catch(err) {}</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
