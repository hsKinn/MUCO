package com.ktds.muco.table.member.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.ktds.muco.table.member.vo.MemberVO;
import com.ktds.muco.util.xml.XML;

/**
 * 
 * @author 김광민
 *
 */
public class MemberDAO {
	

	/**
	 * 
	 * 회원가입
	 * 
	 * @author 유병훈
	 * 
	 */
	public void addNewMember(MemberVO memberVO) {
		
		loadOracleDriver();
		
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);
			
			String query = XML.getNodeString("//query/member/addNewMember/text()");
			stmt = conn.prepareStatement(query);
			stmt.setString(1, memberVO.getEmail());
			stmt.setString(2, memberVO.getPassword());
			stmt.setString(3, memberVO.getName());
			
			stmt.executeUpdate();

			
		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		}
		finally {
			closeDB(conn, stmt, null);	
		}
	}
	
	/**
	 * 
	 * 로그인하기위해 해당 유저가 존재하는지 확인
	 * 
	 * @author 김광민
	 * 
	 */
	public MemberVO getMemberByEmailAndPassword(MemberVO memberVO) {
		
		loadOracleDriver();
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {

			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			String query = XML.getNodeString("//query/member/getMemberByIdAndPassword/text()");
			stmt = conn.prepareStatement(query);

			stmt.setString(1, memberVO.getEmail());
			stmt.setString(2, memberVO.getPassword());

			rs = stmt.executeQuery();

			MemberVO validMemberVO = null;

			if (rs.next()) {

				validMemberVO = new MemberVO();

				validMemberVO.setEmail(rs.getString("EMAIL"));
				validMemberVO.setPassword(rs.getString("PASSWORD"));
				validMemberVO.setName(rs.getString("NAME"));
				validMemberVO.setIsAdmin(rs.getInt("IS_ADMIN"));
				validMemberVO.setMainImageName(rs.getString("MAIN_IMAGE_NAME"));
				validMemberVO.setMainImageLocation(rs.getString("MAIN_IMAGE_LOCATION"));
				validMemberVO.setJoinDate(rs.getString("JOIN_DT"));
				validMemberVO.setRecentAccessDate(rs.getString("RECENT_ACCESS_DT"));

			}

			return validMemberVO;

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			closeDB(conn, stmt, rs);
		}
	}
	
	/**
	 *
	 * 회원 이름 수정 
	 * 
	 * @author 이기연
	 * 
	 */
	public void updateName(MemberVO memberVO) {
		loadOracleDriver();
		
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);
			
			String query = XML.getNodeString("//query/member/updateName/text()");
			stmt = conn.prepareStatement(query);
			stmt.setString(1, memberVO.getEmail());
			stmt.setString(2, memberVO.getPassword());
			stmt.setString(3, memberVO.getName());
			
			stmt.executeUpdate();

			
		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		}
		finally {
			closeDB(conn, stmt, null);	
		}		
	}
	
	/**
	 * 회원 번호 수정
	 * 
	 * @author 이기연
	 * 
	 */
	public void updatePhoneNumber(MemberVO memberVO) {
		loadOracleDriver();
		
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);
			
			String query = XML.getNodeString("//query/member/updatePhoneNumber/text()");
			stmt = conn.prepareStatement(query);
			stmt.setString(1, memberVO.getEmail());
			stmt.setString(2, memberVO.getPassword());
			stmt.setString(3, memberVO.getName());
			
			stmt.executeUpdate();

			
		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		}
		finally {
			closeDB(conn, stmt, null);	
		}		
	}
	
	/**
	 * 
	 * Load Oracle Driver
	 * 
	 * @author 김광민
	 * 
	 */
	private void loadOracleDriver() {
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
		} catch (ClassNotFoundException e) {
			throw new RuntimeException(e.getMessage(), e);
		}
	}
	
	/**
	 * 
	 * Close DB
	 * 
	 * @author 김광민
	 * 
	 */
	private void closeDB(Connection conn, PreparedStatement stmt, ResultSet rs) {
		if ( rs != null ) {
			try {
				rs.close();
			} catch (SQLException e) {}
		}
		if ( stmt != null ) {
			try {
				stmt.close();
			} catch (SQLException e) {}
		}
		if ( conn != null ) {
			try {
				conn.close();
			} catch (SQLException e) {}
		}
	}


}
