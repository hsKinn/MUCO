package com.ktds.muco.table.member.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.ktds.muco.table.member.vo.MemberSearchVO;
import com.ktds.muco.table.member.vo.MemberVO;
import com.ktds.muco.util.xml.XML;

/**
 * 
 * @author 김광민
 *
 */
public class MemberDAO {

	/**
	 * 
	 * 회원가입
	 * 
	 * @author 유병훈
	 * 
	 */
	public void addNewMember(MemberVO memberVO) {

		loadOracleDriver();

		Connection conn = null;
		PreparedStatement stmt = null;

		try {
			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			String query = XML.getNodeString("//query/member/addNewMember/text()");
			stmt = conn.prepareStatement(query);
			stmt.setString(1, memberVO.getEmail());
			stmt.setString(2, memberVO.getPassword());
			stmt.setString(3, memberVO.getName());

			stmt.executeUpdate();

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			closeDB(conn, stmt, null);
		}
	}

	/**
	 * 어드민 로그인 확인
	 * @author 이기연
	 */
	public MemberVO getMemberByEmailAndPasswordForAdmin(MemberVO memberVO) {

		loadOracleDriver();
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {

			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			String query = XML.getNodeString("//query/member/getMemberByEmailAndPasswordForAdmin/text()");
			stmt = conn.prepareStatement(query);

			stmt.setString(1, memberVO.getEmail());
			stmt.setString(2, memberVO.getPassword());

			rs = stmt.executeQuery();

			MemberVO validMemberVO = null;

			if (rs.next()) {

				validMemberVO = new MemberVO();

				validMemberVO.setEmail(rs.getString("EMAIL"));
				validMemberVO.setPassword(rs.getString("PASSWORD"));
				validMemberVO.setName(rs.getString("NAME"));
				// 이부분 추가
				validMemberVO.setPhoneNumber(rs.getString("PHONE_NUMBER"));
				validMemberVO.setIsAdmin(rs.getInt("IS_ADMIN"));
				validMemberVO.setMainImageName(rs.getString("MAIN_IMAGE_NAME"));
				validMemberVO.setMainImageLocation(rs.getString("MAIN_IMAGE_LOCATION"));
				validMemberVO.setJoinDate(rs.getString("JOIN_DT"));
				validMemberVO.setRecentAccessDate(rs.getString("RECENT_ACCESS_DT"));

			}

			return validMemberVO;

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			closeDB(conn, stmt, rs);
		}
	}

	/**
	 *
	 * 회원 이름 수정
	 * 
	 * @author 이기연
	 * 
	 */
	public void updateName(MemberVO memberVO) {
		loadOracleDriver();

		Connection conn = null;
		PreparedStatement stmt = null;

		try {
			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			String query = XML.getNodeString("//query/member/updateName/text()");
			stmt = conn.prepareStatement(query);
			stmt.setString(1, memberVO.getName());
			stmt.setString(2, memberVO.getEmail());

			stmt.executeUpdate();

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			closeDB(conn, stmt, null);
		}
	}

	/**
	 * 회원 번호 수정
	 * 
	 * @author 이기연
	 * 
	 */
	public void updatePhoneNumber(MemberVO memberVO) {
		loadOracleDriver();

		Connection conn = null;
		PreparedStatement stmt = null;

		try {
			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			String query = XML.getNodeString("//query/member/updatePhoneNumber/text()");
			stmt = conn.prepareStatement(query);
			stmt.setString(1, memberVO.getPhoneNumber());
			stmt.setString(2, memberVO.getEmail());

			stmt.executeUpdate();

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			closeDB(conn, stmt, null);
		}
	}

	/**
	 * 회원 비밀번호 수정
	 * 
	 * @author 이기연
	 * 
	 */
	public void updatePassword(MemberVO memberVO) {
		loadOracleDriver();

		Connection conn = null;
		PreparedStatement stmt = null;

		try {
			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			String query = XML.getNodeString("//query/member/updatePassword/text()");
			stmt = conn.prepareStatement(query);
			stmt.setString(1, memberVO.getPassword());
			stmt.setString(2, memberVO.getEmail());

			stmt.executeUpdate();

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			closeDB(conn, stmt, null);
		}
	}

	/**
	 * 이름 중복 체크 0: 중복 X 1: 중복 O
	 * 
	 * @author 이기연
	 * 
	 * 
	 */
	public int isExistName(String name) {

		loadOracleDriver();
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			String query = XML.getNodeString("//query/member/isExistName/text()");
			stmt = conn.prepareStatement(query);

			stmt.setString(1, name);

			rs = stmt.executeQuery();

			if (rs.next()) {
				return rs.getInt("COUNT");
			}

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			closeDB(conn, stmt, rs);
		}

		return 0;
	}

	/**
	 * 회원 프로필 이미지 등록
	 * 
	 * @author 이기연
	 * 
	 */
	public void addMainImage(MemberVO memberVO) {

		loadOracleDriver();

		Connection conn = null;
		PreparedStatement stmt = null;

		try {
			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			String query = XML.getNodeString("//query/member/addMainImage/text()");

			stmt = conn.prepareStatement(query);
			stmt.setString(1, memberVO.getMainImageName());
			stmt.setString(2, memberVO.getMainImageLocation());
			stmt.setString(3, memberVO.getEmail());

			stmt.executeUpdate();

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			closeDB(conn, stmt, null);
		}

	}

	/**
	 * @author 이기연 memberCount 받아오기
	 * @return
	 */
	public int getAllMemberCount() {
		loadOracleDriver();

		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {

			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			String query = XML.getNodeString("//query/member/getAllMemberCount/text()");
			stmt = conn.prepareStatement(query);

			rs = stmt.executeQuery();

			int placeCount = 0;

			if (rs.next()) {
				placeCount = rs.getInt(1);
			}
			return placeCount;

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			closeDB(conn, stmt, rs);
		}
	}

	/**
	 * @author 이기연 모든 memberList 받아오기
	 * @param memberSearchVO
	 * @return
	 */
	public List<MemberVO> getAllMembers(MemberSearchVO memberSearchVO, int sortOption) {
		loadOracleDriver();

		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		List<MemberVO> members = new ArrayList<MemberVO>();

		try {

			MemberVO memberVO = null;
			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);
			String query = "";
			
			//가입일
			if (sortOption==1) {
				
			} 
			// 최근 접속일 
			else if (sortOption==2) {
				
			} 
			// 이름 
			else if (sortOption==3) {
				
			}
			// 이메일 
			else if (sortOption==4) {
				
			}
			// 운영자 
			else if (sortOption==5) {
				
			}
			
			// article을 꺼내온다.
			query = XML.getNodeString("//query/member/getAllMembers/text()");
			stmt = conn.prepareStatement(query);
			stmt.setInt(1, memberSearchVO.getEndIndex());
			stmt.setInt(2, memberSearchVO.getStartIndex());

			rs = stmt.executeQuery();

			while (rs.next()) {
				memberVO = new MemberVO();

				memberVO.setEmail(rs.getString("EMAIL"));
				memberVO.setPassword(rs.getString("PASSWORD"));
				memberVO.setIsAdmin(rs.getInt("IS_ADMIN"));
				memberVO.setPhoneNumber(rs.getString("PHONE_NUMBER"));
				memberVO.setMainImageName(rs.getString("MAIN_IMAGE_NAME"));
				memberVO.setMainImageLocation(rs.getString("MAIN_IMAGE_LOCATION"));
				memberVO.setName(rs.getString("NAME"));
				memberVO.setJoinDate(rs.getString("JOIN_DT"));
				memberVO.setRecentAccessDate(rs.getString("RECENT_ACCESS_DT"));

				members.add(memberVO);
			}

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);

		} finally {
			closeDB(conn, stmt, rs);
		}

		return members;
	}

	/**
	 * @author 이기연 Block 된 member 수 구하기
	 * @return
	 */
	public int getBlockedMemberCount() {
		loadOracleDriver();

		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {

			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			String query = XML.getNodeString("//query/member/getBlockedMemberCount/text()");
			stmt = conn.prepareStatement(query);

			rs = stmt.executeQuery();

			int placeCount = 0;

			if (rs.next()) {
				placeCount = rs.getInt(1);
			}
			return placeCount;

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			closeDB(conn, stmt, rs);
		}
	}

	/**
	 * @author 이기연 Block된 멤버 list 받아오기
	 * @param memberSearchVO
	 * @return
	 */
	public List<MemberVO> getBlockedMembers(MemberSearchVO memberSearchVO) {
		loadOracleDriver();

		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		List<MemberVO> members = new ArrayList<MemberVO>();

		try {

			MemberVO memberVO = null;
			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			// article을 꺼내온다.
			String query = XML.getNodeString("//query/member/getBlockedMembers/text()");
			stmt = conn.prepareStatement(query);
			stmt.setInt(1, memberSearchVO.getEndIndex());
			stmt.setInt(2, memberSearchVO.getStartIndex());

			rs = stmt.executeQuery();

			while (rs.next()) {
				memberVO = new MemberVO();

				memberVO.setEmail(rs.getString("EMAIL"));
				memberVO.setPassword(rs.getString("PASSWORD"));
				memberVO.setIsAdmin(rs.getInt("IS_ADMIN"));
				memberVO.setPhoneNumber(rs.getString("PHONE_NUMBER"));
				memberVO.setMainImageName(rs.getString("MAIN_IMAGE_NAME"));
				memberVO.setMainImageLocation(rs.getString("MAIN_IMAGE_LOCATION"));
				memberVO.setName(rs.getString("NAME"));
				memberVO.setJoinDate(rs.getString("JOIN_DT"));
				memberVO.setRecentAccessDate(rs.getString("RECENT_ACCESS_DT"));

				members.add(memberVO);
			}

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);

		} finally {
			closeDB(conn, stmt, rs);
		}

		return members;
	}

	/**
	 * @author 이기연 신고된 place를 생성한 멤버 count 받아오기
	 * @return
	 */
	public int getReportedMemberCount() {
		loadOracleDriver();

		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {

			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			String query = XML.getNodeString("//query/member/getReportedMemberCount/text()");
			stmt = conn.prepareStatement(query);

			rs = stmt.executeQuery();

			int placeCount = 0;

			if (rs.next()) {
				placeCount = rs.getInt(1);
			}
			return placeCount;

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			closeDB(conn, stmt, rs);
		}
	}

	/**
	 * @author 이기연 신고된 place를 생성한 멤버 list 받아오기
	 * @param memberSearchVO
	 * @return
	 */
	public List<MemberVO> getReportedMembers(MemberSearchVO memberSearchVO) {
		loadOracleDriver();

		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		List<MemberVO> members = new ArrayList<MemberVO>();

		try {

			MemberVO memberVO = null;
			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			// article을 꺼내온다.
			String query = XML.getNodeString("//query/member/getReportedMembers/text()");
			stmt = conn.prepareStatement(query);
			stmt.setInt(1, memberSearchVO.getEndIndex());
			stmt.setInt(2, memberSearchVO.getStartIndex());

			rs = stmt.executeQuery();

			while (rs.next()) {
				memberVO = new MemberVO();

				memberVO.setEmail(rs.getString("EMAIL"));
				memberVO.setPassword(rs.getString("PASSWORD"));
				memberVO.setIsAdmin(rs.getInt("IS_ADMIN"));
				memberVO.setPhoneNumber(rs.getString("PHONE_NUMBER"));
				memberVO.setMainImageName(rs.getString("MAIN_IMAGE_NAME"));
				memberVO.setMainImageLocation(rs.getString("MAIN_IMAGE_LOCATION"));
				memberVO.setName(rs.getString("NAME"));
				memberVO.setJoinDate(rs.getString("JOIN_DT"));
				memberVO.setRecentAccessDate(rs.getString("RECENT_ACCESS_DT"));

				members.add(memberVO);
			}

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);

		} finally {
			closeDB(conn, stmt, rs);
		}

		return members;
	}

	/**
	 * @author 이기연 memberDetail를 email로 받아온다.
	 * @param email
	 * @return
	 */
	public MemberVO getMemberDetailByEmail(String email) {
		MemberVO memberVO = new MemberVO();

		loadOracleDriver();

		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			String query = XML.getNodeString("//query/member/getMemberDetailByEmail/text()");
			stmt = conn.prepareStatement(query);

			stmt.setString(1, email);
			rs = stmt.executeQuery();

			if (rs.next()) {

				memberVO.setEmail(rs.getString("EMAIL"));
				memberVO.setPassword(rs.getString("PASSWORD"));
				memberVO.setIsAdmin(rs.getInt("IS_ADMIN"));
				memberVO.setPhoneNumber(rs.getString("PHONE_NUMBER"));
				memberVO.setMainImageName(rs.getString("MAIN_IMAGE_NAME"));
				memberVO.setMainImageLocation(rs.getString("MAIN_IMAGE_LOCATION"));
				memberVO.setName(rs.getString("NAME"));
				memberVO.setJoinDate(rs.getString("JOIN_DT"));
				memberVO.setRecentAccessDate(rs.getString("RECENT_ACCESS_DT"));
			}
			return memberVO;

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			closeDB(conn, stmt, rs);
		}
	}

	/**
	 * 로그인한 회원이 admin인지 확인하는 경우
	 * @param email
	 * @return
	 */
	public int isAdmin(String email) {
		loadOracleDriver();
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			String query = XML.getNodeString("//query/member/isAdmin/text()");
			stmt = conn.prepareStatement(query);

			stmt.setString(1, email);

			rs = stmt.executeQuery();

			if (rs.next()) {
				return rs.getInt("COUNT");
			}

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			closeDB(conn, stmt, rs);
		}

		return 0;
	}
	
	
	/**
	 * @author 이기연
	 * 맴버 삭제
	 * @param placeId
	 */
	public void deleteMembers(String memberEmail) {
		int insertCount = 0;
		loadOracleDriver();

		Connection conn = null;
		PreparedStatement stmt = null;

		try {

			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			String query = XML.getNodeString("//query/member/deleteMembersByEmail/text()");
			stmt = conn.prepareStatement(query);
			System.out.println(query);

			stmt.setString(1, memberEmail);

			insertCount = stmt.executeUpdate();

			if (insertCount > 0) {
				stmt.close();
				System.out.println("memberEmail 삭제 성공");
			}

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			closeDB(conn, stmt, null);
		}	
		
	}

	/**
	 * @author 이기연
	 * 맴버 블락
	 * @param memberEmail
	 */
	public void blockMembersByEmail(String email) {
		int insertCount = 0;
		loadOracleDriver();

		Connection conn = null;
		PreparedStatement stmt = null;

		try {

			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			String query = XML.getNodeString("//query/member/blockMembersByEmail/text()");
			stmt = conn.prepareStatement(query);
			System.out.println(query);

			stmt.setString(1, email);

			insertCount = stmt.executeUpdate();

			if (insertCount > 0) {
				stmt.close();
				System.out.println("MEMBER BLOCK 성공");
			}

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			closeDB(conn, stmt, null);
		}	
	}
	
	/**
	 * @author 이기연
	 * add admin
	 * @param email
	 */
	public void addAdminMemberByEmail(String email) {
		int insertCount = 0;
		loadOracleDriver();

		Connection conn = null;
		PreparedStatement stmt = null;

		try {

			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			String query = XML.getNodeString("//query/member/addAdminMemberByEmail/text()");
			stmt = conn.prepareStatement(query);
			System.out.println(query);

			stmt.setString(1, email);

			insertCount = stmt.executeUpdate();

			if (insertCount > 0) {
				stmt.close();
				System.out.println("MEMBER admin 추가 성공");
			}

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			closeDB(conn, stmt, null);
		}	
	}
	
	/**
	 * @author 이기연
	 * 어드민을 일반회원으로...
	 * @param email
	 */
	public void subAdminMemberByEmail(String email) {
		int insertCount = 0;
		loadOracleDriver();

		Connection conn = null;
		PreparedStatement stmt = null;

		try {

			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			String query = XML.getNodeString("//query/member/subAdminMemberByEmail/text()");
			stmt = conn.prepareStatement(query);
			System.out.println(query);

			stmt.setString(1, email);

			insertCount = stmt.executeUpdate();

			if (insertCount > 0) {
				stmt.close();
				System.out.println("MEMBER admin 제외 성공");
			}

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			closeDB(conn, stmt, null);
		}	
	}
	
	/**
	 * block 맴버 해제
	 * @param email
	 */
	public void releaseBlockedMemberByEmail(String email) {
		int insertCount = 0;
		loadOracleDriver();

		Connection conn = null;
		PreparedStatement stmt = null;

		try {

			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_TRAVERY_USER, Const.DB_TRAVERY_PASSWORD);

			String query = XML.getNodeString("//query/member/releaseBlockedMemberByEmail/text()");
			stmt = conn.prepareStatement(query);
			System.out.println(query);

			stmt.setString(1, email);

			insertCount = stmt.executeUpdate();

			if (insertCount > 0) {
				stmt.close();
				System.out.println("block 맴버 해제 성공");
			}

		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			closeDB(conn, stmt, null);
		}	
	}

	/**
	 * 
	 * Load Oracle Driver
	 * 
	 * @author 김광민
	 * 
	 */
	private void loadOracleDriver() {
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
		} catch (ClassNotFoundException e) {
			throw new RuntimeException(e.getMessage(), e);
		}
	}

	/**
	 * 
	 * Close DB
	 * 
	 * @author 김광민
	 * 
	 */
	private void closeDB(Connection conn, PreparedStatement stmt, ResultSet rs) {
		if (rs != null) {
			try {
				rs.close();
			} catch (SQLException e) {
			}
		}
		if (stmt != null) {
			try {
				stmt.close();
			} catch (SQLException e) {
			}
		}
		if (conn != null) {
			try {
				conn.close();
			} catch (SQLException e) {
			}
		}
	}



}
